// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="mojo_services"]
module mojo.gfx.composition;

import "mojo/services/geometry/interfaces/geometry.mojom";

// An image is a graphics buffer which can be transferred between processes.
//
// TODO: The current implementation relies on buffers in CPU memory
// whereas eventually we will want to support buffers in graphics memory.
// We may also want to support certain planar formats.
struct Image {
  // Specifies how pixels are represented in the image buffer.
  enum PixelFormat {
    ARGB_8888 = 0,
  };

  // Specifies how alpha information should be interpreted.
  enum AlphaFormat {
    // Image is considered to be opaque.  Alpha channel is ignored.
    // Blend function is: src.RGB
    OPAQUE = 0,

    // Color channels have been premultiplied by alpha.
    // Blend function is: src.RGB + (dest.RGB * (1 - src.A))
    PREMULTIPLIED = 1,

    // Color channels have not been premultiplied by alpha.
    // Blend function is: (src.RGB * src.A) + (dest.RGB * (1 - src.A))
    NON_PREMULTIPLIED = 2,
  };

  // Specifies how color information should be interpreted.
  enum ColorSpace {
    SRGB = 0,
  };

  // The width and height of the image in pixels.
  mojo.Size size;

  // The number of bytes per row in the image buffer.
  uint32 stride;

  // The offset of the first pixel contains within the image buffer.
  uint32 offset = 0;

  // The pixel format of the image.
  PixelFormat pixel_format = PixelFormat.ARGB_8888;

  // The intended interpretation of alpha information in the image, if any.
  AlphaFormat alpha_format = AlphaFormat.OPAQUE;

  // The intended interpreration of color information the image.
  ColorSpace color_space = ColorSpace.SRGB;

  // The VMO handle of the buffer which contains the actual image data.
  handle<shared_buffer> buffer;
};
